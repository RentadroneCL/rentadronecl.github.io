"use strict";(self.webpackChunksimplemap_github_io=self.webpackChunksimplemap_github_io||[]).push([[520],{3905:(e,t,o)=>{o.d(t,{Zo:()=>c,kt:()=>h});var n=o(7294);function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,n,a=function(e,t){if(null==e)return{};var o,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var o=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(o),d=a,h=m["".concat(l,".").concat(d)]||m[d]||u[d]||r;return o?n.createElement(h,i(i({ref:t},c),{},{components:o})):n.createElement(h,i({ref:t},c))}));function h(e,t){var o=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=o.length,i=new Array(r);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<r;p++)i[p]=o[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,o)}d.displayName="MDXCreateElement"},504:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var n=o(7462),a=(o(7294),o(3905));const r={slug:"revolutionize-your-application-deployment-with-this-one-tool-docker compose",title:"Revolutionize Your Application Deployment with this One Tool",authors:["alvaro"],tags:["docker","code","tutorial","how-to"]},i=void 0,s={permalink:"/blog/revolutionize-your-application-deployment-with-this-one-tool-docker compose",editUrl:"https://github.com/RentadroneCL/rentadronecl.github.io/tree/main/blog/2023-04-05-docker-compose/index.md",source:"@site/blog/2023-04-05-docker-compose/index.md",title:"Revolutionize Your Application Deployment with this One Tool",description:"What is Docker Compose?",date:"2023-04-05T00:00:00.000Z",formattedDate:"April 5, 2023",tags:[{label:"docker",permalink:"/blog/tags/docker"},{label:"code",permalink:"/blog/tags/code"},{label:"tutorial",permalink:"/blog/tags/tutorial"},{label:"how-to",permalink:"/blog/tags/how-to"}],readingTime:3.69,hasTruncateMarker:!1,authors:[{name:"Alvaro Farias",title:"Lead Developer",url:"https://github.com/afariasfermin",imageURL:"https://github.com/afariasfermin.png",key:"alvaro"}],frontMatter:{slug:"revolutionize-your-application-deployment-with-this-one-tool-docker compose",title:"Revolutionize Your Application Deployment with this One Tool",authors:["alvaro"],tags:["docker","code","tutorial","how-to"]},nextItem:{title:"Hello World!",permalink:"/blog/welcome"}},l={authorsImageUrls:[void 0]},p=[{value:"What is Docker Compose?",id:"what-is-docker-compose",level:2},{value:"Why Use Docker Compose?",id:"why-use-docker-compose",level:3},{value:"Commonly used commands",id:"commonly-used-commands",level:2},{value:"Conclusion",id:"conclusion",level:2}],c={toc:p},m="wrapper";function u(e){let{components:t,...o}=e;return(0,a.kt)(m,(0,n.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"what-is-docker-compose"},"What is Docker Compose?"),(0,a.kt)("p",null,'Docker Compose is a tool that simplifies the process of creating, running, and managing multi-container Docker applications. It allows you to define and configure all the services that make up your application in a single YAML file, known as the "Compose file". Docker Compose then uses this file to spin up and manage all the containers that your application needs to run.'),(0,a.kt)("h3",{id:"why-use-docker-compose"},"Why Use Docker Compose?"),(0,a.kt)("p",null,"There are several benefits to using Docker Compose to manage your containerized applications:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Simplifies the management of complex applications: With Docker Compose, you can define all the services that make up your application in a single YAML file, which makes it much easier to manage and deploy complex applications.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Reproducibility: By defining all the services that make up your application in a single YAML file, you can ensure that your application is reproducible across different environments.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Scalability: Docker Compose makes it easy to scale your application up or down by simply changing the number of instances of each service that you want to run.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Isolation: By running each service in its own container, you can ensure that they are isolated from each other, which improves security and stability."))),(0,a.kt)("p",null,"How to Use Docker Compose"),(0,a.kt)("p",null,"To use Docker Compose, you need to create a Compose file that defines all the services that make up your application. The Compose file is written in YAML and consists of a series of services, each of which is defined by a set of parameters."),(0,a.kt)("p",null,"Here is an example Compose file that defines two services: a web server and a database server:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'services:\n  web:\n    image: nginx:latest\n    ports:\n      - "80:80"\n  db:\n    image: mysql:latest\n    environment:\n      MYSQL_ROOT_PASSWORD: password\n      MYSQL_DATABASE: mydb\n      MYSQL_USER: myuser\n      MYSQL_PASSWORD: mypassword\n')),(0,a.kt)("p",null,"In this Compose file, we define two services: ",(0,a.kt)("inlineCode",{parentName:"p"},"web")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"db"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"web")," service uses the ",(0,a.kt)("inlineCode",{parentName:"p"},"nginx")," image and maps port ",(0,a.kt)("inlineCode",{parentName:"p"},"80")," on the host machine to port ",(0,a.kt)("inlineCode",{parentName:"p"},"80")," in the container. The ",(0,a.kt)("inlineCode",{parentName:"p"},"db")," service uses the ",(0,a.kt)("inlineCode",{parentName:"p"},"mysql")," image and sets some environment variables that are used to configure the database."),(0,a.kt)("p",null,"To start the services defined in this compose file, you simply run the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose up\n")),(0,a.kt)("p",null,"This will start both the ",(0,a.kt)("inlineCode",{parentName:"p"},"web")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"db")," services in separate containers and link them together as specified in the Compose file."),(0,a.kt)("h2",{id:"commonly-used-commands"},"Commonly used commands"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose up\n")),(0,a.kt)("p",null,"This command starts all the services defined in your Compose file. It creates and starts containers for each service and links them together according to the configuration in the compose file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose down\n")),(0,a.kt)("p",null,"This command stops and removes all the containers that were created by ",(0,a.kt)("inlineCode",{parentName:"p"},"docker compose up"),". It also removes any networks that were created."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose ps\n")),(0,a.kt)("p",null,"This command shows the status of all the containers that were created by ",(0,a.kt)("inlineCode",{parentName:"p"},"docker compose up"),". It shows the container ID, container name, and the status of each container."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose build\n")),(0,a.kt)("p",null,"This command builds the Docker images for all the services defined in your compose file. It reads the Dockerfile for each service and builds the corresponding image."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose start\n")),(0,a.kt)("p",null,"This command starts the containers that were created by ",(0,a.kt)("inlineCode",{parentName:"p"},"docker compose up")," but have since been stopped."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose stop\n")),(0,a.kt)("p",null,"This command stops the containers that were created by ",(0,a.kt)("inlineCode",{parentName:"p"},"docker compose up")," but keeps them around. You can start them again later using ",(0,a.kt)("inlineCode",{parentName:"p"},"docker compose start"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose restart\n")),(0,a.kt)("p",null,"This command restarts the containers that were created by ",(0,a.kt)("inlineCode",{parentName:"p"},"docker compose up"),". It first stops them and then starts them again."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose logs\n")),(0,a.kt)("p",null,"This command shows the logs for all the containers that were created by ",(0,a.kt)("inlineCode",{parentName:"p"},"docker compose up"),". You can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"-f")," flag to follow the logs in real-time."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose exec\n")),(0,a.kt)("p",null,"This command runs a command in a running container. You can specify the service name and the command to run. For example, ",(0,a.kt)("inlineCode",{parentName:"p"},"docker compose exec web bash")," runs the ",(0,a.kt)("inlineCode",{parentName:"p"},"bash")," command in the ",(0,a.kt)("inlineCode",{parentName:"p"},"web")," container."),(0,a.kt)("h2",{id:"conclusion"},"Conclusion"),(0,a.kt)("p",null,"Docker Compose is a powerful tool that simplifies the management of multi-container Docker applications. By defining all the services that make up your application in a single YAML file, you can ensure that your application is reproducible, scalable, and isolated. We hope that this blog post has given you a basic understanding of Docker Compose and how to use it to manage your containerized applications."))}u.isMDXComponent=!0}}]);